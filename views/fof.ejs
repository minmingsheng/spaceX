<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>cannon.js + three.js physics shooter</title>
        <style>
            html, body {
                width: 100%;
                height: 100%;
            }

            body {
                background-color: #ffffff;
                margin: 0;
                overflow: hidden;
                font-family: arial;
            }

            #blocker {

                position: absolute;

                width: 100%;
                height: 100%;

                background-color: rgba(0,0,0,0.5);

            }

            #instructions {

                width: 100%;
                height: 100%;

                display: -webkit-box;
                display: -moz-box;
                display: box;

                -webkit-box-orient: horizontal;
                -moz-box-orient: horizontal;
                box-orient: horizontal;

                -webkit-box-pack: center;
                -moz-box-pack: center;
                box-pack: center;

                -webkit-box-align: center;
                -moz-box-align: center;
                box-align: center;

                color: #ffffff;
                text-align: center;

                cursor: pointer;

            }

        </style>
    </head>
    <body>
        <script src="js/3js/Three.js"></script>
        <script src="js/3js/cannon.js"></script>
        <script src="js/3js/PointerLockControls404.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>
        <script src="js/3js/STLLoader.js"></script>
        <script src="/socket.io/socket.io.js"></script>
        <div id="blocker">

            <div id="instructions">
                <span style="font-size:68px">404. You got lost..</span>
                <br />
                If you wanna stay: try to escape from this maze
                <br />
                (W,A,S,D = Move, SPACE = Jump, MOUSE = Look, CLICK = Shoot)
            </div>

        </div>
        <script type="text/javascript">
            'use strict';
            let socket = io("<%= host %>"+"/fof");
            socket.on('connect', function () {
                console.log("connect to server")
                
             });
        </script>
        <script>

            var fireTexture =new THREE.ImageUtils.loadTexture('img/fire.jpg');
            var sunTexture =new THREE.ImageUtils.loadTexture('img/sun.jpg');
            var sphereShape, sphereBody, world, physicsMaterial, walls=[], balls=[], ballMeshes=[], boxes=[], boxMeshes=[];
            var sphereShape2; /*temp*/
            var sphereBody2Arr=[]; /*temp*/
            var jason = [];
            var camera, scene, renderer;
            var geometry, material, mesh;
            var controls,time = Date.now();
            var fofMesh;
            var blocker = document.getElementById( 'blocker' );
            var instructions = document.getElementById( 'instructions' );

            var havePointerLock = 'pointerLockElement' in document || 'mozPointerLockElement' in document || 'webkitPointerLockElement' in document;

            if ( havePointerLock ) {

                var element = document.body;
                //if the poiter lock
                var pointerlockchange = function ( event ) {

                    if ( document.pointerLockElement === element || document.mozPointerLockElement === element || document.webkitPointerLockElement === element ) {

                        controls.enabled = true;

                        blocker.style.display = 'none';

                    } else {

                        controls.enabled = false;

                        blocker.style.display = '-webkit-box';
                        blocker.style.display = '-moz-box';
                        blocker.style.display = 'box';

                        instructions.style.display = '';

                    }

                }
                // if the poiter denied
                var pointerlockerror = function ( event ) {
                    instructions.style.display = '';
                }

                // Hook pointer lock state change events
                document.addEventListener( 'pointerlockchange', pointerlockchange, false );
                document.addEventListener( 'mozpointerlockchange', pointerlockchange, false );
                document.addEventListener( 'webkitpointerlockchange', pointerlockchange, false );

                document.addEventListener( 'pointerlockerror', pointerlockerror, false );
                document.addEventListener( 'mozpointerlockerror', pointerlockerror, false );
                document.addEventListener( 'webkitpointerlockerror', pointerlockerror, false );

                instructions.addEventListener( 'click', function ( event ) {
                    instructions.style.display = 'none';

                    // Ask the browser to lock the pointer
                    element.requestPointerLock = element.requestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;

                    if ( /Firefox/i.test( navigator.userAgent ) ) {

                        var fullscreenchange = function ( event ) {

                            if ( document.fullscreenElement === element || document.mozFullscreenElement === element || document.mozFullScreenElement === element ) {

                                document.removeEventListener( 'fullscreenchange', fullscreenchange );
                                document.removeEventListener( 'mozfullscreenchange', fullscreenchange );

                                element.requestPointerLock();
                            }

                        }

                        document.addEventListener( 'fullscreenchange', fullscreenchange, false );
                        document.addEventListener( 'mozfullscreenchange', fullscreenchange, false );

                        element.requestFullscreen = element.requestFullscreen || element.mozRequestFullscreen || element.mozRequestFullScreen || element.webkitRequestFullscreen;

                        element.requestFullscreen();

                    } else {

                        element.requestPointerLock();

                    }

                }, false );

            } else {

                instructions.innerHTML = 'Your browser doesn\'t seem to support Pointer Lock API';

            }

            initCannon();
            init();
            animate();

            function initCannon(){
                // Setup our world
                world = new CANNON.World();
                world.quatNormalizeSkip = 0;
                world.quatNormalizeFast = false;

                var solver = new CANNON.GSSolver();

                world.defaultContactMaterial.contactEquationStiffness = 1e9;
                world.defaultContactMaterial.contactEquationRelaxation = 4;

                solver.iterations = 7;
                solver.tolerance = 0.1;
                var split = true;
                if(split)
                    world.solver = new CANNON.SplitSolver(solver);
                else
                    world.solver = solver;

                world.gravity.set(0,-20,0);
                world.broadphase = new CANNON.NaiveBroadphase();

                // Create a slippery material (friction coefficient = 0.0)
                physicsMaterial = new CANNON.Material("slipperyMaterial");
                var physicsContactMaterial = new CANNON.ContactMaterial(physicsMaterial,
                                                                        physicsMaterial,
                                                                        0.0, // friction coefficient
                                                                        0.3  // restitution
                                                                        );
                // We must add the contact materials to the world
                world.addContactMaterial(physicsContactMaterial);

                // Create a sphere
                var mass = 5, radius = 1.3;
                sphereShape = new CANNON.Sphere(radius);
                sphereBody = new CANNON.Body({ mass: mass });
                sphereBody.addShape(sphereShape);
                sphereBody.position.set(0,5,0);
                sphereBody.linearDamping = 0.9;
                world.addBody(sphereBody);

                // Create a plane
                var groundShape = new CANNON.Plane();
                var groundBody = new CANNON.Body({ mass: 0 });
                groundBody.addShape(groundShape);
                groundBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2);
                world.addBody(groundBody);
            }

            function init() {

                camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );

                scene = new THREE.Scene();
                scene.fog = new THREE.Fog(0x252649, 0, 110 );

                var ambient = new THREE.AmbientLight( 0x021238 );
                scene.add( ambient );

                light = new THREE.SpotLight( 0xefefe7 );
                light.position.set( 10, 60, 20 );
                light.target.position.set( -25, 0, 0 );
                if(true){
                    light.castShadow = true;
                    light.intensity = 1.4;

                    light.shadowCameraNear = 20;
                    light.shadowCameraFar = 50;//camera.far;
                    light.shadowCameraFov = 40;

                    light.shadowMapBias = 0.1;
                    light.shadowMapDarkness = 0.7;
                    light.shadowMapWidth = 2*512;
                    light.shadowMapHeight = 2*512;

                    //light.shadowCameraVisible = true;
                }
                scene.add( light );


// ****************************************************************************
// *                                    404                                   *
// ****************************************************************************
                
                // 404 3D model
                var textLoader = new THREE.STLLoader();
                textLoader.load( 'img/text.stl', function(textGeometry){
                    var material = new THREE.MeshLambertMaterial( {color: 0xea3755, specular: 0x111111, shininess: 200 } );
                    fofMesh = new THREE.Mesh( textGeometry, material );
                    fofMesh.position.set( 170, 20,150);
                    fofMesh.rotation.set(  - Math.PI / 2,0, 0);
                    fofMesh.scale.set( 2, 2, 2);
                    fofMesh.castShadow = true;
                    fofMesh.id = 'fof';
                    fofMesh.receiveShadow = true;
                    scene.add( fofMesh );
                })
                console.log(scene.children);

                var sphere = new THREE.SphereGeometry( 10, 3, 2 );
                light4 = new THREE.PointLight( 0xffaa00, 2, 38 );
                var mmm = new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { map: fireTexture, transparent: true, opacity:0} ) )
                light4.applyMatrix(new THREE.Matrix4().makeTranslation(0,30,0));
                light4.add( mmm );
                scene.add( light4 );
                light4.position.x = -40;
                light4.position.y = 40;
                light4.position.z = 0;

                
                light5 = new THREE.PointLight( 0xea3755, 2, 36 );
                var mmm = new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0xea3755, transparent: true, opacity:0} ) )
                light5.applyMatrix(new THREE.Matrix4().makeTranslation(0,30,0));
                light5.add( mmm );
                scene.add( light5 );
                light5.position.x = -60;
                light5.position.y = 40;
                light5.position.z = 0;      
                light6 = new THREE.PointLight( 0x304c92, 2, 22 );
                var mmm = new THREE.Mesh( sphere, new THREE.MeshBasicMaterial( { color: 0xea3755, transparent: true, opacity:0} ) )
                light6.applyMatrix(new THREE.Matrix4().makeTranslation(0,30,0));
                light6.add( mmm );
                scene.add( light6 );
                light6.position.x = -60;
                light6.position.y = 40;
                light6.position.z = 0;                
                
// ****************************************************************************
// *                                 add maze                                 *
// ****************************************************************************
                var x = 1;
                var y = 10;
                var z = 0;

                function Obj3d (obj, shape, geometry) {
                    this.shape = shape;
                    this.geometry = geometry;
                    this.body = new CANNON.Body({
                        position:obj.position || {x:0, y:0, z:0},
                        mass:obj.mass || 0,
                        shape:this.shape
                    });
                    this.mesh = new THREE.Mesh(this.geometry, obj.material || new THREE.MeshPhongMaterial({side:THREE.DoubleSide}));
                    this.mesh.castShadow = true;
                    this.mesh.receiveShadow = true;
                    world.add(this.body);
                    if (obj.parent) obj.parent.add(this.mesh);
                    else scene.add(this.mesh);
                    this.update = function () {
                        this.mesh.position.copy(this.body.position);
                        this.mesh.quaternion.copy(this.body.quaternion);
                    }
                    this.update();
                    if (obj.mass) objAry.push(this);
                    if (obj.name) this.mesh.name = obj.name;
                }
                function Box (obj) {
                    this.shape = new CANNON.Box(new CANNON.Vec3(obj.size.x/2, obj.size.y/2, obj.size.z/2));
                    this.geometry = new THREE.BoxGeometry(obj.size.x, obj.size.y, obj.size.z);
                    Obj3d.call(this, obj, this.shape, this.geometry);
                }
                function createBoxes (argument) {
                    var wall1 = new Box({
                        size:{x:x,y:y,z:z+100},
                        position:{x:0,y:0,z:0},
                    });
                    var wall2 = new Box({
                        size:{x:x+96,y:y,z:z+1},
                        position:{x:-52,y:0,z:50}
                    });
                    var wall3 = new Box({
                        size:{x:x+100,y:y,z:z+1},
                        position:{x:-50,y:0,z:-50}
                    });
                    var wall4 = new Box({
                        size:{x:x,y:y,z:z+96},
                        position:{x:-100,y:0,z:2}
                    });

                    var wall21 = new Box({
                        size:{x:x,y:y,z:z+16},
                        position:{x:-4,y:0,z:42}
                    });
                    var wall41 = new Box({
                        size:{x:x+35,y:y,z:z+1},
                        position:{x:-82,y:0,z:40}
                    });
                    var wall42 = new Box({
                        size:{x:x+45,y:y,z:z+1},
                        position:{x:-77,y:0,z:-20}
                    });
                    var wall421 = new Box({
                        size:{x:x,y:y,z:z+30},
                        position:{x:-90,y:0,z:-5}
                    });
                    var wall422 = new Box({
                        size:{x:x,y:y,z:z+40},
                        position:{x:-64.5,y:0,z:0}
                    });
                    var wall423 = new Box({
                        size:{x:x+15,y:y,z:z+15},
                        position:{x:-52,y:0,z:-27}
                    });
                    var wall424 = new Box({
                        size:{x:x+30,y:y,z:z+1},
                        position:{x:-49.5,y:0,z:20}
                    });
                    var wall31 = new Box({
                        size:{x:x,y:y,z:z+20},
                        position:{x:-90,y:0,z:-40}
                    });
                    var wall311 = new Box({
                        size:{x:x+25,y:y,z:z+1},
                        position:{x:-77,y:0,z:-30.5}
                    });
                    var wall312 = new Box({
                        size:{x:x,y:y,z:z+10},
                        position:{x:-64.5,y:0,z:-35}
                    });
                    var wall313 = new Box({
                        size:{x:x+25,y:y,z:z+1},
                        position:{x:-52,y:0,z:-40.5}
                    });
                    var wall314 = new Box({
                        size:{x:x,y:y,z:z+20},
                        position:{x:-39,y:0,z:-31}
                    });
                    var wall315 = new Box({
                        size:{x:x+34,y:y,z:z+1},
                        position:{x:-22,y:0,z:-21}
                    });
                    var wall32 = new Box({
                        size:{x:x,y:y,z:z+15},
                        position:{x:-77,y:0,z:-42}
                    });
                    var wall33 = new Box({
                        size:{x:x,y:y,z:z+25},
                        position:{x:-30,y:0,z:-38}
                    });
                    var wall10 = new Box({
                        size:{x:x+14,y:y,z:z+1},
                        position:{x:-8,y:0,z:10}
                    });
                    var wall11 = new Box({
                        size:{x:x+14,y:y,z:z+10},
                        position:{x:-8,y:0,z:-5}
                    });
                    var wall12 = new Box({
                        size:{x:x+20,y:y,z:z+1},
                        position:{x:-10,y:0,z:-25}
                    });
                    var wall121 = new Box({
                        size:{x:x,y:y,z:z+15},
                        position:{x:-20,y:0,z:-33}
                    });
                    var wall122 = new Box({
                        size:{x:x+15,y:y,z:z+1},
                        position:{x:-12,y:0,z:-40}
                    });
                    var wall316 = new Box({
                        size:{x:x,y:y,z:z+40},
                        position:{x:-20,y:0,z:-1}
                    });
                    var wall317 = new Box({
                        size:{x:x+23,y:y,z:z+2},
                        position:{x:-16,y:0,z:20}
                    });
                    var wall318 = new Box({
                        size:{x:x,y:y,z:z+10},
                        position:{x:-4,y:0,z:24}
                    });
                    var wall319 = new Box({
                        size:{x:x,y:y,z:z+10},
                        position:{x:-28,y:0,z:24}
                    });
                    var wall320 = new Box({
                        size:{x:x+45,y:y,z:z+1},
                        position:{x:-50.5,y:0,z:25}
                    });
                    var wall321 = new Box({
                        size:{x:x,y:y,z:z+40},
                        position:{x:-74,y:0,z:5.5}
                    });
                    var wall323 = new Box({
                        size:{x:x+15,y:y,z:z+1},
                        position:{x:-82,y:0,z:16}
                    });
                    var wall324 = new Box({
                        size:{x:x,y:y,z:z+18},
                        position:{x:-90,y:0,z:24.5}
                    });
                    var wall325 = new Box({
                        size:{x:x,y:y,z:z+20},
                        position:{x:-50,y:0,z:35}
                    });
                    var wall326 = new Box({
                        size:{x:x+15,y:y,z:z+2},
                        position:{x:-12,y:0,z:28}
                    });
                    var wall327 = new Box({
                        size:{x:x,y:y,z:z+10},
                        position:{x:-19.5,y:0,z:32.5}
                    });
                    var wall328 = new Box({
                        size:{x:x+30,y:y,z:z+1},
                        position:{x:-30,y:0,z:38}
                    });
                }
                createBoxes();
// ****************************************************************************
// *                                 add maze                                 *
// ****************************************************************************



                controls = new PointerLockControls( camera , sphereBody, {
                    x : -26,
                    y : 40,
                    z : -10
                },"red",404,404,404);
                scene.add( controls.getObject() );


                socket.emit("join");

                var player= [1];
                console.info(controls);
                // floor
                geometry = new THREE.PlaneGeometry( 98, 98, 50, 50 );
                geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );

                material = new THREE.MeshLambertMaterial( { map: sunTexture } );

                mesh = new THREE.Mesh( geometry, material );
                mesh.castShadow = true;
                mesh.receiveShadow = true;
                mesh.position.set(-49,0,0)
                scene.add( mesh );

                renderer = new THREE.WebGLRenderer();
                renderer.shadowMapEnabled = true;
                renderer.shadowMapSoft = true;
                renderer.setSize( window.innerWidth, window.innerHeight );
                renderer.setClearColor( scene.fog.color, 1 );

                document.body.appendChild( renderer.domElement );

                window.addEventListener( 'resize', onWindowResize, false );

                // Add boxes
                // var halfExtents = new CANNON.Vec3(1,1,1);
                // var boxShape = new CANNON.Box(halfExtents);
                // var boxGeometry = new THREE.BoxGeometry(halfExtents.x*2,halfExtents.y*2,halfExtents.z*2);
                // for(var i=0; i<3; i++){
                //     var x = (Math.random()-0.5)*20;
                //     var y = 10+ (Math.random()-0.5)*1;
                //     var z = (Math.random()-0.5)*20;
                //     var boxBody = new CANNON.Body({ mass: 5 });
                //     boxBody.addShape(boxShape);
                //     var boxMesh = new THREE.Mesh( boxGeometry, material );
                //     world.addBody(boxBody);
                //     scene.add(boxMesh);
                //     boxBody.position.set(x,y,z);
                //     boxMesh.position.set(x,y,z);
                //     boxMesh.castShadow = true;
                //     boxMesh.receiveShadow = true;
                //     boxes.push(boxBody);
                //     boxMeshes.push(boxMesh);
                // }

            }

            function onWindowResize() {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize( window.innerWidth, window.innerHeight );
            }



            var dt = 1/60;
            // console.log("fofMesh", fofMesh);
            function animate() {
                // light4.rotation.x += 0.003;
                light4.rotation.z += 0.003;
                // light4.rotation.z += 0.300;
                // socket.on("playerList", function(data){
                //     console.log("playerList: ", data);
                //     for (var i = 0; i < data.roomPlayerLists.length; i++) {
                //         var playerColor = ["pink", "salmon", "skyblue", "indogo", "red"]
                //         var x = (Math.random()-0.5)*50;
                //         var y = 10+ (Math.random()-0.5)*1;
                //         var z = (Math.random()-0.5)*50;
                //         sphereShape2 = new CANNON.Sphere(1.3);
                //         sphereBody2 = new CANNON.Body({ mass: 5 });
                //         sphereBody2.addShape(sphereShape2);
                //         sphereBody2.position.set(0,5,0);
                //         sphereBody2.linearDamping = 0.9;
                //         world.addBody(sphereBody2);
                //         var geometry = new THREE.SphereGeometry(1, 3, 3 );
                //         var material = new THREE.MeshLambertMaterial( { 
                //             color: playerColor[i%playerColor.length],
                //             // transparent: true,
                //             // opacity: 0.4
                //              } );
                //         var jasonObject = new THREE.Mesh( geometry, material );
                //         sphereBody2.position.set(x,y,z);
                //         jasonObject.position.set(x,y,z);
                //         jason.push(jasonObject);
                //         sphereBody2Arr.push(sphereBody2);
                //         console.log("jasonObject.position:from 284 ",jasonObject.position);
                //         scene.add(jasonObject);
                //         sphereBody2.addEventListener("collide",function(e){
                //             console.log("attacked");
                //         });
                //     };
                // });
                
                requestAnimationFrame( animate );
                for (var i = 0; i < jason.length; i++) {
                    jason[i].position.copy(sphereBody2Arr[i].position);
                    // console.log("");
                };

                if(controls.enabled){
                    world.step(dt);

                    // Update ball positions
                    for(var i=0; i<balls.length; i++){
                        ballMeshes[i].position.copy(balls[i].position);
                        ballMeshes[i].quaternion.copy(balls[i].quaternion);
                    }

                    // Update box positions
                    for(var i=0; i<boxes.length; i++){
                        boxMeshes[i].position.copy(boxes[i].position);
                        boxMeshes[i].quaternion.copy(boxes[i].quaternion);
                    }
                }

                controls.update( Date.now() - time );
                renderer.render( scene, camera );
                time = Date.now();

            }

            var ballShape = new CANNON.Sphere(0.2);
            var ballGeometry = new THREE.SphereGeometry(ballShape.radius, 32, 32);
            var shootDirection = new THREE.Vector3();
            var shootVelo = 100; /*shoot speed*/
            var projector = new THREE.Projector();
            function getShootDir(targetVec){
                var vector = targetVec;
                targetVec.set(0,0,1);
                projector.unprojectVector(vector, camera);
                var ray = new THREE.Ray(sphereBody.position, vector.sub(sphereBody.position).normalize() );
                console.log("ray.direaction: ", ray.direction);
                targetVec.copy(ray.direction);
            }

            window.addEventListener("click",function(e){
                if(controls.enabled==true){
                    var x = sphereBody.position.x;
                    var y = sphereBody.position.y;
                    var z = sphereBody.position.z;
                    var ballBody = new CANNON.Body({ mass: 11 }); /*the dencity of bullets*/
                    ballBody.addShape(ballShape);
                    world.addBody(ballBody);
                    var ballMesh = new THREE.Mesh( ballGeometry, material );
                    scene.add(ballMesh);
                    ballMesh.castShadow = true;
                    ballMesh.receiveShadow = true;
                    balls.push(ballBody);
                    ballMeshes.push(ballMesh);
                    getShootDir(shootDirection);
                    ballBody.velocity.set(shootDirection.x * shootVelo,  shootDirection.y * shootVelo, shootDirection.z * shootVelo);

                    // Move the ball outside the player sphere
                    x += shootDirection.x * (sphereShape.radius*1.02 + ballShape.radius);
                    y += shootDirection.y * (sphereShape.radius*1.02 + ballShape.radius);
                    z += shootDirection.z * (sphereShape.radius*1.02 + ballShape.radius);
                    ballBody.position.set(x,y,z);
                    ballMesh.position.set(x,y,z);
                }
            });

        </script>
    </body>
</html>
